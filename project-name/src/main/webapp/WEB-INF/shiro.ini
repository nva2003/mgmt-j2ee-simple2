##
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]


### session sharing between web applications works with these settings but is very brittle when ###redeploying applications
### or when a realm's data store is unavailable (for instance when active directory is down)
### brittleness is detained with overflowToDisk="false"
#sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
#securityManager.sessionManager = $sessionManager
# Configure a SessionDAO
#sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
#securityManager.sessionManager.sessionDAO = $sessionDAO

#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#cacheManager.cacheManagerConfigFile=classpath:shiro-ehcache.xml
#securityManager.cacheManager = $cacheManager


#cookie = org.apache.shiro.web.servlet.SimpleCookie
#cookie.name = SSOcookie
#cookie.path = /
#cookie.secure = true
#cookie.httpOnly = true                                                        // edit: makes CSRF more difficult
#securityManager.sessionManager.sessionIdCookie = $cookie

#firstStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
#securityManager.authenticator.authenticationStrategy = $firstStrategy


#roles.unauthorizedUrl = /authz/accessdenied.jsp

# roles filter: redirect to error page if user does not have access rights
#roles.unauthorizedUrl = /simpleshirosecuredapplication/account/accessdenied.jsp

# use native session management so we can configure our own session clustering:
#sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
#sessionDAO.activeSessionsCacheName = myname
#sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
#sessionManager.sessionDAO = $sessionDAO
# we have configured Hazelcast to enforce a TTL for the activeSessions Map.  No need for Shiro to invalidate!
#sessionManager.sessionValidationSchedulerEnabled = false
sessionManager = org.apache.shiro.web.session.mgt.ServletContainerSessionManager

# cookie for single sign on
# cookie = org.apache.shiro.web.servlet.SimpleCookie
# cookie.name = www.foo.com.session
# cookie.path = /
# sessionManager.sessionIdCookie = $cookie

securityManager.sessionManager = $sessionManager

# configure Hazelcast as our Shiro CacheManager.  Adding session capacity is as easy as adding hazelcast nodes!
#cacheManager = rzd.pktbcki.authz.shiro.hazelcast.cache.HazelcastCacheManager
#securityManager.cacheManager = $cacheManager

# configure EHCache as our Shiro CacheManager.
#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#cacheManager.cacheManagerConfigFile=classpath:shiro-ehcache.xml
#securityManager.cacheManager = $cacheManager

#shiro.sessionManager.cookie.name = shiropiromiro




# Auth

hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashAlgorithmName = SHA-512

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

jdbcRealm = rzd.pktbctt.shiro.realm.jdbc.CustomJdbcRealm
jdbcRealm.credentialsMatcher = $passwordMatcher

jdbcRealm.systemId = {system_id}
#BF
jdbcRealm.tablesScheme = pob0aqcs
#GVC
#jdbcRealm.tablesScheme = ASP2QB


dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = java:comp/env/jdbc/project-name/userManagement


jdbcRealm.dataSource= $dataSource


# ensure the securityManager uses our native SessionManager
#sessionManager = org.apache.shiro.session.mgt.DefaultSessionManager
#securityManager.sessionManager = $sessionManager
securityManager.realms = $jdbcRealm
#securityManager.realms = $ldapRealm

#set the sessionManager to use an enterprise cache for backing storage:
#sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
#securityManager.sessionManager.sessionDAO = $sessionDAO


#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#securityManager.cacheManager = $cacheManager

#anyofroles = rzd.pktbcct.shiro.web.filter.authz.AnyOfRolesAuthorizationFilter

#Remember Me
#rememberMe = org.apache.shiro.web.mgt.CookieRememberMeManager
#securityManager.rememberMeManager = $rememberMe
# The 'cipherKey' attribute is a byte array.    By default, text values
# for all byte array properties are expected to be Base64 encoded:
#securityManager.rememberMeManager.cipherKey =  kPH+bIxk5D2deZiIxcaaaA==
#However, if you prefer to use Hex encoding instead, you must prefix the String token with 0x (�zero� �x�):
#securityManager.rememberMeManager.cipherKey = 0x3707344A4093822299F31D008

#anyofroles = rzd.pktbcki.authz.shiro.filter.AnyOfRolesAuthorizationFilter
anyofroles = rzd.pktbctt.shiro.web.filter.AnyOfRolesAuthorizationFilter



#listener = org.apache.shiro.config.event.LoggingBeanEventListener

shiro.loginUrl = /signin
#authc.loginUrl=/formfilterlogin
#shiro.loginUrl = /authz/signin.jsp
#shiro.loginUrl = /login.jsp
#authc.successUrl = /whatever
shiro.successUrl = /
shiro.unauthorizedUrl = /authz/accessDenied.jsp

#authc.failureKeyAttribute=simpleShiroApplicationLoginFailure
authc.failureKeyAttribute = shiroLoginFailure
#roles.unauthorizedUrl = /authz/accessdenied.jsp
#perms.unauthorizedUrl = /authz/accessdenied.jsp

[users]
# format: username = password, role1, role2, ..., roleN
#guest = guest,guest

#[roles]
# format: roleName = permission1, permission2, ..., permissionN
#admin = *
#schwartz = lightsaber:*
#goodguy = winnebago:drive:eagle5

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
#/login.jsp = authc
#/signin = authc
#/authz/signin.jsp = authc
#/logout = logout
#/** = authc,roles["group1"]


/signin = anon

/authz/signin.jsp = anon
/authz/accessDenied.jsp = anon
/authz/changePassword.jsp = anon
/authz/passwordExpires.jsp = anon
/authz/resetPassword.jsp = anon
/resetPassword.jsp = anon
/forgetpassword = anon
/needchangepassword = anon
/logout = anon
/css/** = anon
/js/** = anon
/images/** = anon
/fonts/** = anon


/** = authc,anyofroles["NPP.SZF,NPP.VIPG,NPP.NVZD,NPP.MDP,NPP.VPP,NPP.VPPR,NPP.FLS.CD,NPP.FLS.CT,NPP.FLS.CTE,NPP.FLS.CTR,NPP.EGS,NPP.NVD.Vvod,NPP.NVD.Soglas,NPP.NVD.Prosmotr,NPP.PRLOC,NPP.CUTR,NPP.MRS.S,NPP.MRS.D,NPP.DO9VC,NPP.DO10VC,NPP.TO33VC,NPP.TO35VC,NPP.TO36VC,NPP.RDP,NPP.OSU,NPP.MVPS,NPP.ARSS,NPP.MGSP,NPP.NTKP"]
#/** = authc,anyofroles["NPP.SZF,NPP.VIPG,NPP.NVZD,NPP.MDP,NPP.VPP,NPP.VPPR,NPP.FLS.CD,NPP.FLS.CT,NPP.FLS.CTE,NPP.FLS.CTR,NPP.EGS,NPP.NVD.Vvod,NPP.NVD.Soglas,NPP.NVD.Prosmotr,NPP.PRLOC,NPP.CUTR,NPP.MRS.S,NPP.MRS.D,NPP.DO9VC,NPP.DO10VC,NPP.TO33VC,NPP.TO35VC,NPP.TO36VC,NPP.RDP,NPP.OSU,NPP.MVPS,NPP.ARSS,NPP.MGSP,NPP.NTKP,NPP.DOR.01,NPP.DOR.10,NPP.DOR.17,NPP.DOR.24,NPP.DOR.28,NPP.DOR.51,NPP.DOR.58,NPP.DOR.61,NPP.DOR.63,NPP.DOR.76,NPP.DOR.80,NPP.DOR.83,NPP.DOR.88,NPP.DOR.92,NPP.DOR.94,NPP.DOR.96"]


